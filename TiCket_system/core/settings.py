"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv # Import load_dotenv

load_dotenv() # Load environment variables from .env at the very beginning


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Ensure logs directory exists before logging configuration ---
# This is crucial for the 'file' logger handler to work correctly,
# especially with Django's autoreloader.
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY from environment variable, provide a fallback for development if needed
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-fallback-secret-key-for-dev-only-do-not-use-in-prod')

# SECURITY WARNING: don't run with debug turned on in production!
# Get DEBUG from environment variable, convert to boolean
DEBUG = os.environ.get('DEBUG', 'True').lower() in ('true', '1', 't')

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'rest_framework', # Add Django Rest Framework
    'tickets',        # Your app
    
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    'corsheaders.middleware.CorsMiddleware', # Add this for CORS
    
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Example: project-level templates folder
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static', # Where Django will look for static files (e.g., your main.js, style.css)
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # For production deployment (collectstatic)


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- LOGGING Configuration ---
# This dictionary configures how Django handles logging messages.
LOGGING = {
    'version': 1, # Specifies the logging schema version
    'disable_existing_loggers': False, # Don't disable existing loggers

    # Define different formats for log messages
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    # Define where log messages go (e.g., console, file)
    'handlers': {
        'console': { # Logs to the console (where you run runserver)
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': { # Logs to a file (useful for production)
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'django.log'), # Path to your log file
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5, # Keep up to 5 old log files
            'formatter': 'verbose',
        },
    },

    # Define loggers for specific Django components or your apps
    'root': { # Default logger for anything not specifically handled
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': { # Logs for Django's core operations
            'handlers': ['console', 'file'],
            'level': 'INFO', # Can be 'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'
            'propagate': False, # Don't pass messages to parent loggers
        },
        'tickets': { # Logger specifically for your 'tickets' app
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # Set to DEBUG for detailed app logs
            'propagate': False,
        },
        'django.core.mail': { # NEW: Logger for Django's email sending
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # Set to DEBUG to see detailed email errors
            'propagate': False,
        },
    },
}


# Add SSLCommerz Credentials
SSLCOMMERZ_STORE_ID = os.environ.get('SSLCOMMERZ_STORE_ID')
SSLCOMMERZ_STORE_PASSWORD = os.environ.get('SSLCOMMERZ_STORE_PASSWORD')

# Email Settings (for sending confirmation emails)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' 
EMAIL_HOST = 'smtp.gmail.com' # Or your email host
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')

# CORS Settings (if frontend is on a different domain/port)
# pip install django-cors-headers
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]
CORS_ALLOW_CREDENTIALS = True # if you're sending cookies/auth headers

